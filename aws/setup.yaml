AWSTemplateFormatVersion: 2010-09-09
Description: Real Time Page Editor Template
Parameters:
  RalTimePageEditorWebsiteBucketName:
    Type: String
    Description: S3 Bucket name for real time page editor website
    Default: real-time-page-editor-website
Resources:
  RealTimePageEditorWebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref RalTimePageEditorWebsiteBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  RealTimePageEditorWebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RealTimePageEditorWebsiteS3Bucket
      PolicyDocument:
        Id: RealTimePageEditorWebsiteS3BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${RealTimePageEditorWebsiteS3Bucket}/*"
  S3BucketCleanerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3BucketCleanerLambdaFunctionPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${RealTimePageEditorWebsiteS3Bucket}"
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${RealTimePageEditorWebsiteS3Bucket}/*"
  S3BucketCleanerLambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt S3BucketCleanerLambdaFunction.Arn
  S3BucketCleanerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt S3BucketCleanerLambdaRole.Arn
      Environment:
        Variables:
          BUCKETS_TO_CLEAN:
            !Join [",", [!Ref RealTimePageEditorWebsiteS3Bucket]]
      Code:
        ZipFile: |
          import os.path
          import boto3
          import cfnresponse

          BUCKETS_TO_CLEAN = os.environ['BUCKETS_TO_CLEAN'].split(",")

          s3 = boto3.resource('s3')

          def clear_bucket(bucketName):
              s3.Bucket(bucketName).objects.all().delete()

          def lambda_handler(event, context):
              responseData = {}
              if event['RequestType'] == 'Delete':
                  for bucketName in BUCKETS_TO_CLEAN:
                      try:
                          clear_bucket(bucket)
                          print("Successfully cleared bucket: " + bucketName)
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      except Exception as e:
                          print('Exception when cleaning bucket: ' + bucketName)
                          print(e)
                          cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
Outputs:
  WebsiteUrl:
    Description: Real Time Page Editor Website Url
    Value: !GetAtt RealTimePageEditorWebsiteS3Bucket.WebsiteURL
