AWSTemplateFormatVersion: 2010-09-09
Description: Real Time Page Editor Template
Parameters:
  RalTimePageEditorWebsiteBucketName:
    Type: String
    Description: S3 Bucket name for real time page editor website
    Default: real-time-page-editor
  GitHubRepositoryURL:
    Type: String
    Description: URL for GitHub repository with real time page editor website files
    Default: https://raw.githubusercontent.com/NowakArtur97/Real-Time-Page-Editor/master
  FilesToCopyFromGitHub:
    Type: String
    Description: Real time page editor website files to copy from GitHub
    Default: index.html,style.css,live_editor.js,deploy.js
  CreatedWebsiteBucketName:
    Type: String
    Description: S3 Bucket name for created website with deployed code from editor
    Default: real-time-page-editor-website
  FileWithAPIGatewayInvokeURL:
    Type: String
    Description: File with API Gateway invoke url to be reaplaced by lambda function
    Default: deploy.js
  APIGatewayName:
    Type: String
    Default: real-time-page-editor-api
  APIGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: prod
  APIGatewayOperationName:
    Type: String
    Default: real-time-page-editor-deployment
Resources:
  RealTimePageEditorWebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref RalTimePageEditorWebsiteBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  RealTimePageEditorWebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RealTimePageEditorWebsiteS3Bucket
      PolicyDocument:
        Id: RealTimePageEditorWebsiteS3BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${RealTimePageEditorWebsiteS3Bucket}/*"
  GitHubToS3LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: GitHubToS3LambdaFunctionPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${RealTimePageEditorWebsiteS3Bucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  GitHubToS3LambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: GitHubToS3LambdaFunction
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt GitHubToS3LambdaFunction.Arn
  GitHubToS3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 120
      Handler: index.lambda_handler
      Role: !GetAtt GitHubToS3LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref RealTimePageEditorWebsiteS3Bucket
          GITHUB_URL: !Ref GitHubRepositoryURL
          FILES_TO_COPY: !Ref FilesToCopyFromGitHub
      Code:
        ZipFile: |
          import os
          import urllib.request
          import boto3
          from urllib.parse import urlparse
          import cfnresponse

          s3 = boto3.resource('s3')
          BUCKET_NAME = os.environ['BUCKET_NAME']
          GITHUB_URL = os.environ['GITHUB_URL']
          FILES_TO_COPY = os.environ['FILES_TO_COPY'].split(",")

          def save_to_local(url):
              urlPath = urlparse(url).path
              fileName = os.path.basename(urlPath)
              filePath = '/tmp/' + fileName
              urllib.request.urlretrieve(url, filePath)
              return filePath

          def copy_to_s3(url, contentType):
              filePath = save_to_local(url)
              fileName = os.path.basename(filePath)
              s3.Object(BUCKET_NAME, fileName).put(Body=open(filePath, 'rb'), ContentType=contentType)

          def resolve_content_type(file):
              extension = file.split(".")[1]
              if extension == "html":
                  return "text/html"
              elif extension == "css":
                  return "text/css"
              elif extension == "js":
                  return "text/javascript"
              elif extension == "py":
                  return "text/x-python"
              elif extension in ["jpeg", "jpg"]:
                  return "image/jpeg"
              elif extension == "png":
                  return "image/png"
              elif extension == "tiff":
                  return "image/tiff"
              elif extension == "bmp":
                  return "image/bmp"
              elif extension == "gif":
                  return "image/gif"
              elif extension in ["svg", "xml"]:
                  return "image/svg+xml"
              elif extension in ["mp3", "wav", "ogg"]:
                  return "audio/mpeg"
              elif extension == "pdf":
                  return "application/pdf"
              elif extension == "zip":
                  return "application/zip"
              elif extension == "yaml":
                  return "binary/octet-stream"
              else:
                  return "text/plain"

          def lambda_handler(event, context):
              responseData = {}
              requestType = event['RequestType']
              try:
                  if requestType == 'Create':
                      for fileToCopy in FILES_TO_COPY:
                          fileOnGitHub = GITHUB_URL + "/" + fileToCopy
                          print("File to copy: " + fileToCopy)
                          print("URL to file: " + fileOnGitHub)
                          contentType = resolve_content_type(fileToCopy)
                          copy_to_s3(fileOnGitHub, contentType)
                          print("Successfully copied file: " + fileToCopy + " to bucket: " + BUCKET_NAME)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as e:
                  print("Exception when copying files from GitHub to S3 bucket: " + BUCKET_NAME)
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
  APIGatewayRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Real Time Page Editor API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref APIGatewayName
  APIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: !Ref APIGatewayOperationName
      RestApiId: !Ref APIGatewayRestAPI
  APIGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref APIGatewayResource
      RestApiId: !Ref APIGatewayRestAPI
      OperationName: !Ref APIGatewayOperationName
      AuthorizationType: NONE
      ApiKeyRequired: false
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt APIGatewayToS3LambdaFunction.Arn
  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: APIGatewayMethod
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      Description: Real Time Page Editor API Deployment
  APIGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref APIGatewayDeployment
      RestApiId: !Ref APIGatewayRestAPI
      StageName: !Ref APIGatewayStageName
      Description: Real Time Page Editor API Stage v1
  APIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt APIGatewayToS3LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
  CreatedWebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref CreatedWebsiteBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  CreatedWebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CreatedWebsiteS3Bucket
      PolicyDocument:
        Id: CreatedWebsiteS3BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${CreatedWebsiteS3Bucket}/*"
  APIGatewayToS3LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: APIGatewayToS3LambdaFunctionPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${CreatedWebsiteS3Bucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  APIGatewayToS3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 30
      Handler: index.lambda_handler
      Role: !GetAtt APIGatewayToS3LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref CreatedWebsiteS3Bucket
      Code:
        ZipFile: |
          import json
  S3BucketCleanerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3BucketCleanerLambdaFunctionPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${RealTimePageEditorWebsiteS3Bucket}"
                  - !Sub "arn:aws:s3:::${CreatedWebsiteS3Bucket}"
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${RealTimePageEditorWebsiteS3Bucket}/*"
                  - !Sub "arn:aws:s3:::${CreatedWebsiteS3Bucket}/*"
  S3BucketCleanerLambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt S3BucketCleanerLambdaFunction.Arn
  S3BucketCleanerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt S3BucketCleanerLambdaRole.Arn
      Environment:
        Variables:
          BUCKETS_TO_CLEAN:
            !Join [
              ",",
              [
                !Ref RealTimePageEditorWebsiteS3Bucket,
                !Ref CreatedWebsiteS3Bucket,
              ],
            ]
      Code:
        ZipFile: |
          import os.path
          import boto3
          import cfnresponse

          BUCKETS_TO_CLEAN = os.environ['BUCKETS_TO_CLEAN'].split(",")

          s3 = boto3.resource('s3')

          def clear_bucket(bucketName):
              s3.Bucket(bucketName).objects.all().delete()

          def lambda_handler(event, context):
              responseData = {}
              if event['RequestType'] == 'Delete':
                  for bucketName in BUCKETS_TO_CLEAN:
                      try:
                          clear_bucket(bucketName)
                          print("Successfully cleared bucket: " + bucketName)
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      except Exception as e:
                          print('Exception when cleaning bucket: ' + bucketName)
                          print(e)
                          cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
Outputs:
  APIGatewayInvokeURL:
    Description: API invoke URL
    Value: !Sub https://${APIGatewayRestAPI}.execute-api.${AWS::Region}.amazonaws.com/${APIGatewayStageName}
  RealTimePageEditorWebsiteUrl:
    Description: Real time page editor website url
    Value: !GetAtt RealTimePageEditorWebsiteS3Bucket.WebsiteURL
  CreatedWebsiteUrl:
    Description: Created using editor website url
    Value: !GetAtt CreatedWebsiteS3Bucket.WebsiteURL
